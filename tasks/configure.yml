---
# configure and (re)start telegraf and make sure it's enabled

- name: Create Telegraf config file
  ansible.builtin.template:
    src: telegraf.conf.j2
    dest: "{{ telegraf_configuration_dir }}/telegraf.conf"
  notify:
    - 'restart telegraf'

- name: Output destination file name for custom Telegraf config
  ansible.builtin.debug:
    msg: "{{ (telegraf_custom_config_file|basename).split('.')|first }}.conf"
  when: telegraf_custom_config_file is defined

- name: Create additional Telegraf config from given template/file
  ansible.builtin.template:
    src: "{{ telegraf_custom_config_file }}"
    dest: "{{ telegraf_configuration_dir }}/telegraf.d/{{ (telegraf_custom_config_file|basename).split('.')|first }}.conf"
  when: telegraf_custom_config_file is defined
  notify:
    - 'restart telegraf'

- name: Register telegraf deamon to start on bootup and make sure it's started now
  ansible.builtin.service:
    name: telegraf
    enabled: yes

- name: Trigger all registered notifications (restarts)
  ansible.builtin.meta: flush_handlers

- name: Ensure telegraf is in stopped state when telegraf_stop_after_install (in pre-install scenarious, when you are just baking images etc.)
  ansible.builtin.service:
    name: telegraf
    state: stopped
  when: telegraf_stop_after_install == true

- name: Make sure telegraf is started (unless telegraf_stop_after_install is true)
  ansible.builtin.service:
    name: telegraf
    state: started
  when: telegraf_stop_after_install is undefined or telegraf_stop_after_install != true

- name: Check telegraf status
  ansible.builtin.command:
    cmd: service telegraf status
  register: telegraf_status
  ignore_errors: true

- name: Output telegraf status
  ansible.builtin.debug:
    var: telegraf_status.stdout_lines
    verbosity: 1
